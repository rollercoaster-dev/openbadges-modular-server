name: Unified CI Pipeline

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

# Global environment variables
env:
  NODE_ENV: test
  NODE_PATH: "."
  CI: 'true'
  AUTH_API_KEY_TEST: "verysecretkeye2e:test-user:E2E Testing Key"
  AUTH_API_KEY_E2E: "verysecretkeye2e:test-user:E2E Testing Key"

jobs:
  # Lint and type check job
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Lint
        run: bun run lint || echo "Linting issues found, but continuing build"

      - name: Type check
        run: bun run typecheck

  # Core tests that don't depend on specific databases
  core-tests:
    name: Core Tests
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run core tests
        run: bun test --pattern "!tests/infrastructure/database/**" --pattern "!tests/e2e/**"
        env:
          NODE_PATH: "."

  # SQLite-specific tests
  sqlite-tests:
    name: SQLite Tests
    runs-on: ubuntu-latest
    needs: core-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlite3-dev
          bun install

      - name: Run SQLite unit and integration tests
        run: bun test tests/infrastructure/database/modules/sqlite
        env:
          NODE_PATH: "."
          DB_TYPE: sqlite
          SQLITE_FILE: ':memory:'

      - name: Run SQLite E2E tests
        run: |
          # Create SQLite database file for E2E tests
          mkdir -p tests/e2e
          touch tests/e2e/test_database.sqlite
          chmod 666 tests/e2e/test_database.sqlite
          
          # Run SQLite migrations
          NODE_ENV=test DB_TYPE=sqlite SQLITE_DB_PATH=$(pwd)/tests/e2e/test_database.sqlite bun run db:generate:sqlite
          NODE_ENV=test DB_TYPE=sqlite SQLITE_DB_PATH=$(pwd)/tests/e2e/test_database.sqlite bun run db:migrate:sqlite
          
          # Run E2E tests with SQLite
          NODE_ENV=test DB_TYPE=sqlite SQLITE_DB_PATH=$(pwd)/tests/e2e/test_database.sqlite bun test ./tests/e2e
        env:
          NODE_PATH: "."

  # PostgreSQL-specific tests
  postgres-tests:
    name: PostgreSQL Tests
    runs-on: ubuntu-latest
    needs: core-tests
    
    # Service container for PostgreSQL
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: openbadges_test
        ports:
          - 5432:5432
        # Health checks to ensure PostgreSQL is ready
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          bun install

      - name: Verify PostgreSQL connection
        run: |
          echo "Verifying PostgreSQL connection..."
          PGPASSWORD=postgres psql -h localhost -U postgres -d openbadges_test -c "SELECT 1 as connection_test;"
          echo "PostgreSQL connection verified successfully!"

      - name: Run PostgreSQL migrations
        run: |
          NODE_ENV=test DB_TYPE=postgresql DATABASE_URL=postgresql://postgres:postgres@localhost:5432/openbadges_test bun run db:generate:pg
          NODE_ENV=test DB_TYPE=postgresql DATABASE_URL=postgresql://postgres:postgres@localhost:5432/openbadges_test bun run db:migrate:pg

      - name: Run PostgreSQL unit and integration tests
        run: bun test tests/infrastructure/database/modules/postgresql
        env:
          NODE_PATH: "."
          DB_TYPE: postgresql
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/openbadges_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: openbadges_test
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432

      - name: Run PostgreSQL E2E tests
        run: bun test ./tests/e2e
        env:
          NODE_PATH: "."
          DB_TYPE: postgresql
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/openbadges_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: openbadges_test
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432

  # Combined test coverage
  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: [sqlite-tests, postgres-tests]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run tests with coverage
        run: bun run test:coverage
        env:
          NODE_PATH: "."
          DB_TYPE: sqlite
          SQLITE_FILE: ':memory:'

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false
