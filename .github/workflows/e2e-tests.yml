name: E2E Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

# Environment variables available to all jobs and steps in this workflow
env:
  NODE_ENV: test
  NODE_PATH: "."
  POSTGRES_USER: testuser
  POSTGRES_PASSWORD: testpassword
  POSTGRES_DB: openbadges_test
  POSTGRES_HOST: localhost
  POSTGRES_PORT: 5433
  DATABASE_URL: postgresql://testuser:testpassword@localhost:5433/openbadges_test
  AUTH_API_KEY_TEST: "verysecretkeye2e:test-user:E2E Testing Key"
  AUTH_API_KEY_E2E: "verysecretkeye2e:test-user:E2E Testing Key"

jobs:
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: openbadges_test
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
          --health-start-period=10s
          --name postgres-test-container

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlite3-dev
          bun install

      - name: Create .env.test file
        run: |
          cat > .env.test << EOF
          # API Configuration
          API_BASE_URL=http://localhost:3001
          PORT=3001
          NODE_ENV=test
          NODE_PATH=.

          # Database Configuration
          # Default to PostgreSQL for CI
          DB_TYPE=postgresql
          POSTGRES_HOST=localhost
          POSTGRES_PORT=5433
          POSTGRES_USER=testuser
          POSTGRES_PASSWORD=testpassword
          POSTGRES_DB=openbadges_test
          DATABASE_URL=postgresql://testuser:testpassword@localhost:5433/openbadges_test

          # SQLite Configuration
          SQLITE_DB_PATH=tests/e2e/test_database.sqlite

          # Authentication Configuration
          AUTH_ENABLED=true
          AUTH_API_KEY_TEST=verysecretkeye2e:test-user:E2E Testing Key
          AUTH_API_KEY_E2E=verysecretkeye2e:test-user:E2E Testing Key
          AUTH_PUBLIC_PATHS=/docs,/swagger,/health,/public,/v3/issuers/*/verify,/v3/badge-classes/*/verify,/v3/assertions/*/verify
          AUTH_DISABLE_RBAC=true

          # Logging Configuration
          LOG_LEVEL=debug
          EOF

          # Display the created file for debugging
          echo "Created .env.test file:"
          cat .env.test

      - name: Install PostgreSQL client tools
        run: |
          echo "Installing PostgreSQL client tools..."
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Wait for PostgreSQL to be ready
        id: pg-ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."

          # Use pg_isready with a timeout to check if PostgreSQL is accepting connections
          MAX_RETRIES=30
          RETRY_INTERVAL=2

          for i in $(seq 1 $MAX_RETRIES); do
            if pg_isready -h localhost -p 5433 -U testuser -d openbadges_test; then
              echo "PostgreSQL is ready!"
              echo "pg_ready=true" >> $GITHUB_OUTPUT
              break
            fi

            if [ $i -eq $MAX_RETRIES ]; then
              echo "PostgreSQL failed to start after $MAX_RETRIES attempts"
              echo "pg_ready=false" >> $GITHUB_OUTPUT
              exit 0  # Don't fail the workflow, we'll handle this in later steps
            fi

            echo "Waiting for PostgreSQL to start... ($i/$MAX_RETRIES)"
            sleep $RETRY_INTERVAL
          done

      - name: Verify PostgreSQL connection
        if: steps.pg-ready.outputs.pg_ready == 'true'
        id: pg-verify
        run: |
          echo "Verifying PostgreSQL connection..."

          # Test connection with psql
          if PGPASSWORD=testpassword psql -h localhost -p 5433 -U testuser -d openbadges_test -c "SELECT version(), current_database(), current_user;" > /dev/null; then
            echo "PostgreSQL connection successful!"
            echo "pg_verified=true" >> $GITHUB_OUTPUT
          else
            echo "PostgreSQL connection test failed"
            echo "pg_verified=false" >> $GITHUB_OUTPUT
          fi

          # Show detailed PostgreSQL information
          echo "PostgreSQL version and connection details:"
          PGPASSWORD=testpassword psql -h localhost -p 5433 -U testuser -d openbadges_test -c "SELECT version(), current_database(), current_user;"

      - name: Setup SQLite database
        id: sqlite-setup
        run: |
          echo "Setting up SQLite database..."

          # Create directory with proper permissions
          mkdir -p tests/e2e
          chmod 777 tests/e2e

          # Create SQLite database file
          touch tests/e2e/test_database.sqlite
          chmod 666 tests/e2e/test_database.sqlite

          # Verify SQLite file was created
          if [ -f "tests/e2e/test_database.sqlite" ]; then
            echo "SQLite database file created successfully"
            echo "sqlite_ready=true" >> $GITHUB_OUTPUT
            ls -la tests/e2e/test_database.sqlite
          else
            echo "Failed to create SQLite database file"
            echo "sqlite_ready=false" >> $GITHUB_OUTPUT
          fi

      - name: Migrate PostgreSQL database
        if: steps.pg-verify.outputs.pg_verified == 'true'
        id: pg-migrate
        run: |
          echo "Running PostgreSQL migrations..."

          # Set environment variables for migrations
          export NODE_ENV=test
          export DB_TYPE=postgresql
          export DATABASE_URL=postgresql://testuser:testpassword@localhost:5433/openbadges_test
          export POSTGRES_HOST=localhost
          export POSTGRES_PORT=5433
          export POSTGRES_USER=testuser
          export POSTGRES_PASSWORD=testpassword
          export POSTGRES_DB=openbadges_test

          # Generate migration files with error handling
          echo "Generating PostgreSQL migration files..."
          if bun run db:generate:pg; then
            echo "Migration files generated successfully"
          else
            echo "Warning: Failed to generate migration files, but continuing..."
          fi

          # Run migrations with error handling
          echo "Running PostgreSQL migrations..."
          if bun run db:migrate:pg; then
            echo "Migrations applied successfully"
            echo "pg_migrated=true" >> $GITHUB_OUTPUT
          else
            echo "Warning: Failed to apply migrations, but continuing..."
            echo "pg_migrated=false" >> $GITHUB_OUTPUT
          fi

          # Verify migrations were applied
          echo "Verifying migrations were applied..."
          if PGPASSWORD=testpassword psql -h localhost -p 5433 -U testuser -d openbadges_test -c "\dt"; then
            echo "Tables exist in the database"
          else
            echo "Warning: Could not list tables, but continuing..."
          fi

          # Check for specific tables
          echo "Checking for required tables..."
          TABLES=("issuers" "badge_classes" "assertions")
          ALL_TABLES_EXIST=true

          for TABLE in "${TABLES[@]}"; do
            if PGPASSWORD=testpassword psql -h localhost -p 5433 -U testuser -d openbadges_test -c "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = '$TABLE')" | grep -q "t"; then
              echo "Table $TABLE exists"
            else
              echo "Table $TABLE does not exist"
              ALL_TABLES_EXIST=false
            fi
          done

          if [ "$ALL_TABLES_EXIST" = true ]; then
            echo "All required tables exist"
            echo "pg_tables_ready=true" >> $GITHUB_OUTPUT
          else
            echo "Some required tables are missing"
            echo "pg_tables_ready=false" >> $GITHUB_OUTPUT
          fi

          echo "PostgreSQL migrations completed"

      - name: Wait a bit more before tests
        run: sleep 5 # Wait an additional 5 seconds before tests

      - name: Verify database connections
        run: |
          echo "Verifying PostgreSQL connection..."
          PGPASSWORD=testpassword psql -h localhost -p 5433 -U testuser -d openbadges_test -c "SELECT current_database(), current_user, version();"

          echo "Verifying SQLite file..."
          ls -la tests/e2e/test_database.sqlite

          echo "Checking database configuration..."
          echo "DB_TYPE: $DB_TYPE"
          echo "DATABASE_URL: $DATABASE_URL"
          echo "SQLITE_DB_PATH: $SQLITE_DB_PATH"

          echo "Checking environment variables..."
          env | grep -E 'DB_|AUTH_|NODE_|API_'

      - name: Debug environment
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory listing:"
          ls -la
          echo "Node path: $NODE_PATH"
          echo "Environment variables:"
          env | grep -E 'DB_|AUTH_|NODE_|API_'
          echo "Test directory structure:"
          ls -la tests/
          ls -la tests/e2e/ || echo "tests/e2e directory not found"

      - name: Run E2E tests with PostgreSQL
        if: steps.pg-verify.outputs.pg_verified == 'true' && steps.pg-migrate.outputs.pg_tables_ready == 'true'
        id: pg-tests
        run: |
          echo "Running E2E tests with PostgreSQL..."

          # Set environment variables for tests
          export NODE_ENV=test
          export NODE_PATH="."
          export DB_TYPE=postgresql
          export DATABASE_URL=postgresql://testuser:testpassword@localhost:5433/openbadges_test
          export POSTGRES_HOST=localhost
          export POSTGRES_PORT=5433
          export POSTGRES_USER=testuser
          export POSTGRES_PASSWORD=testpassword
          export POSTGRES_DB=openbadges_test
          export AUTH_API_KEY_TEST="verysecretkeye2e:test-user:E2E Testing Key"
          export AUTH_API_KEY_E2E="verysecretkeye2e:test-user:E2E Testing Key"

          # Run tests with increased verbosity and timeout
          echo "Running tests with PostgreSQL database..."
          if bun test --timeout 120000 tests/e2e; then
            echo "PostgreSQL tests passed successfully"
            echo "pg_tests_passed=true" >> $GITHUB_OUTPUT
          else
            echo "PostgreSQL tests failed"
            echo "pg_tests_passed=false" >> $GITHUB_OUTPUT
            # Don't exit with error, we'll still try SQLite tests
          fi
        env:
          DB_TYPE: postgresql
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5433/openbadges_test
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: openbadges_test
          AUTH_API_KEY_TEST: "verysecretkeye2e:test-user:E2E Testing Key"
          AUTH_API_KEY_E2E: "verysecretkeye2e:test-user:E2E Testing Key"
          NODE_PATH: "."
          NODE_ENV: "test"

      - name: Run E2E tests with SQLite
        if: steps.sqlite-setup.outputs.sqlite_ready == 'true'
        id: sqlite-tests
        run: |
          echo "Running E2E tests with SQLite..."

          # Verify SQLite file exists
          ls -la tests/e2e/test_database.sqlite

          # Set environment variables for tests
          export NODE_ENV=test
          export NODE_PATH="."
          export DB_TYPE=sqlite
          export SQLITE_DB_PATH=tests/e2e/test_database.sqlite
          export AUTH_API_KEY_TEST="verysecretkeye2e:test-user:E2E Testing Key"
          export AUTH_API_KEY_E2E="verysecretkeye2e:test-user:E2E Testing Key"

          # Run tests with increased verbosity and timeout
          echo "Running tests with SQLite database..."
          if bun test --timeout 120000 tests/e2e; then
            echo "SQLite tests passed successfully"
            echo "sqlite_tests_passed=true" >> $GITHUB_OUTPUT
          else
            echo "SQLite tests failed"
            echo "sqlite_tests_passed=false" >> $GITHUB_OUTPUT
            # Don't exit with error, we'll handle the overall status at the end
          fi
        env:
          DB_TYPE: sqlite
          SQLITE_DB_PATH: "tests/e2e/test_database.sqlite"
          AUTH_API_KEY_TEST: "verysecretkeye2e:test-user:E2E Testing Key"
          AUTH_API_KEY_E2E: "verysecretkeye2e:test-user:E2E Testing Key"
          NODE_PATH: "."
          NODE_ENV: "test"

      - name: Test Summary
        if: always()
        run: |
          echo "E2E Test Summary:"
          echo "----------------"

          # PostgreSQL Status
          if [ "${{ steps.pg-verify.outputs.pg_verified }}" == "true" ]; then
            echo "✅ PostgreSQL Connection: Successful"
          else
            echo "❌ PostgreSQL Connection: Failed"
          fi

          if [ "${{ steps.pg-migrate.outputs.pg_tables_ready }}" == "true" ]; then
            echo "✅ PostgreSQL Tables: Ready"
          else
            echo "❌ PostgreSQL Tables: Not Ready"
          fi

          if [ "${{ steps.pg-tests.outputs.pg_tests_passed }}" == "true" ]; then
            echo "✅ PostgreSQL Tests: Passed"
          elif [ "${{ steps.pg-tests.outputs.pg_tests_passed }}" == "false" ]; then
            echo "❌ PostgreSQL Tests: Failed"
          else
            echo "⚠️ PostgreSQL Tests: Not Run"
          fi

          # SQLite Status
          if [ "${{ steps.sqlite-setup.outputs.sqlite_ready }}" == "true" ]; then
            echo "✅ SQLite Setup: Successful"
          else
            echo "❌ SQLite Setup: Failed"
          fi

          if [ "${{ steps.sqlite-tests.outputs.sqlite_tests_passed }}" == "true" ]; then
            echo "✅ SQLite Tests: Passed"
          elif [ "${{ steps.sqlite-tests.outputs.sqlite_tests_passed }}" == "false" ]; then
            echo "❌ SQLite Tests: Failed"
          else
            echo "⚠️ SQLite Tests: Not Run"
          fi

          echo "----------------"

          # Determine overall success/failure
          if [ "${{ steps.pg-tests.outputs.pg_tests_passed }}" == "true" ] || [ "${{ steps.sqlite-tests.outputs.sqlite_tests_passed }}" == "true" ]; then
            echo "✅ Overall Status: PASSED (At least one database test suite passed)"
            exit 0
          else
            echo "❌ Overall Status: FAILED (All database test suites failed)"
            exit 1
          fi