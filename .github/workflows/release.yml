name: Release

on:
  push:
    branches:
      - main
      - beta
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/README.md'
      - '.augment/**'

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build application
        run: bun run build

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Check for existing release
        id: check-release
        run: |
          # Get current branch
          CURRENT_BRANCH=$(git branch --show-current)
          echo "Current branch: $CURRENT_BRANCH"

          # Get the latest commit that's not a release commit
          LATEST_NON_RELEASE_COMMIT=$(git log --oneline --grep="chore(release):" --invert-grep -n 1 --format="%H")
          echo "Latest non-release commit: $LATEST_NON_RELEASE_COMMIT"

          # Show recent commits for debugging
          echo "Recent commits:"
          git log --oneline -5

          # For beta branch, check for beta tags specifically
          if [ "$CURRENT_BRANCH" = "beta" ]; then
            echo "Checking for existing beta releases..."
            if git tag --points-at $LATEST_NON_RELEASE_COMMIT | grep -q "beta"; then
              echo "Beta release already exists for this commit"
              echo "should_release=false" >> $GITHUB_OUTPUT
            else
              echo "No beta release exists for this commit"
              echo "should_release=true" >> $GITHUB_OUTPUT
            fi
          else
            # For main branch, check for regular version tags
            if git tag --points-at $LATEST_NON_RELEASE_COMMIT | grep -q "^v"; then
              echo "Release already exists for this commit"
              echo "should_release=false" >> $GITHUB_OUTPUT
            else
              echo "No release exists for this commit"
              echo "should_release=true" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Setup semantic-release
        if: steps.check-release.outputs.should_release == 'true'
        run: |
          # Create .npmrc to prevent npm publishing issues
          echo "//registry.npmjs.org/:_authToken=dummy" > .npmrc

          # The existing .releaserc.json already supports beta branches and has proper CI config
          echo "Using existing semantic-release configuration with beta branch support"

          # Verify semantic-release plugins are available
          echo "Verifying semantic-release installation..."
          bun run semantic-release --version

      - name: Install GitHub CLI
        if: steps.check-release.outputs.should_release == 'true'
        run: |
          # Install GitHub CLI for release verification
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: Release with semantic-release
        if: steps.check-release.outputs.should_release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: dummy
          # Enable debug logging for semantic-release
          DEBUG: semantic-release:*
        run: |
          echo "Running semantic-release for beta branch..."
          echo "Current branch: $(git branch --show-current)"
          echo "Latest commit: $(git log --oneline -1)"
          echo "Git remote: $(git remote -v)"
          echo "Git status: $(git status --porcelain)"

          # Ensure we're on the correct branch for semantic-release
          CURRENT_BRANCH=$(git branch --show-current)
          echo "Current branch detected: $CURRENT_BRANCH"

          # Show recent commits to help debug
          echo "Recent commits:"
          git log --oneline -5

          # Show semantic-release configuration
          echo "Semantic-release configuration:"
          cat .releaserc.json

          # Run semantic-release using bun with verbose output
          echo "Starting semantic-release..."
          bun run semantic-release --debug

      - name: Verify release
        if: steps.check-release.outputs.should_release == 'true'
        run: |
          # Wait a moment for release to be fully created
          sleep 5

          # Verify that the release was created
          echo "Checking for new tags..."
          git fetch --tags

          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "no-tags")
          echo "Latest tag: $LATEST_TAG"

          if [ "$LATEST_TAG" = "no-tags" ]; then
            echo "⚠️ No tags found. This might be expected for beta releases that don't create tags."
            echo "Checking for GitHub releases instead..."

            # List recent releases to see if one was created
            gh release list --limit 5
            exit 0
          fi

          # Check if GitHub release exists for the tag
          echo "Verifying GitHub release for tag: $LATEST_TAG"
          if gh release view "$LATEST_TAG" > /dev/null 2>&1; then
            echo "✅ GitHub release verified: $LATEST_TAG"
            gh release view "$LATEST_TAG" --json tagName,name,prerelease
          else
            echo "⚠️ GitHub release not found for tag: $LATEST_TAG"
            echo "This might be expected for beta releases. Listing recent releases:"
            gh release list --limit 5
            exit 0
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
