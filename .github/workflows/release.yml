name: Release

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches:
      - main
      - beta

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build application
        run: bun run build

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Check for existing release
        id: check-release
        run: |
          # Get the latest commit that's not a release commit
          LATEST_NON_RELEASE_COMMIT=$(git log --oneline --grep="chore(release):" --invert-grep -n 1 --format="%H")
          echo "Latest non-release commit: $LATEST_NON_RELEASE_COMMIT"

          # Check if there's already a release for this commit
          if git tag --points-at $LATEST_NON_RELEASE_COMMIT | grep -q "^v"; then
            echo "Release already exists for this commit"
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "No release exists for this commit"
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

      - name: Setup semantic-release
        if: steps.check-release.outputs.should_release == 'true'
        run: |
          # Create .npmrc to prevent npm publishing issues
          echo "//registry.npmjs.org/:_authToken=dummy" > .npmrc

      - name: Release
        if: steps.check-release.outputs.should_release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: dummy
        run: npx semantic-release

      - name: Install GitHub CLI
        if: steps.check-release.outputs.should_release == 'true'
        run: sudo apt-get update && sudo apt-get install -y gh

      - name: Verify release
        if: steps.check-release.outputs.should_release == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Verify that the release was created
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "Latest tag: $LATEST_TAG"

          # Check if GitHub release exists
          if gh release view "$LATEST_TAG" > /dev/null 2>&1; then
            echo "✅ GitHub release verified: $LATEST_TAG"
          else
            echo "❌ GitHub release not found: $LATEST_TAG"
            exit 1
          fi
