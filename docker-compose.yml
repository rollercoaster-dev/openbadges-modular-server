version: '3.8'

services:
  # API service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - HOST=0.0.0.0
      - NODE_ENV=production
      # Database configuration
      # Uncomment one of the following database configurations:

      # SQLite configuration (default)
      - DB_TYPE=sqlite
      - SQLITE_FILE=/data/sqlite.db

      # PostgreSQL configuration
      # - DB_TYPE=postgresql
      # - DATABASE_URL=postgres://postgres:postgres@db:5432/openbadges

      - BASE_URL=http://localhost:3000
    volumes:
      - sqlite_data:/data
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  db:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=openbadges
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Database migrations service
  migrations:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["bun", "run", "db:migrate"]
    environment:
      - NODE_ENV=production
      # Database configuration
      # Uncomment one of the following database configurations:

      # SQLite configuration (default)
      - DB_TYPE=sqlite
      - SQLITE_FILE=/data/sqlite.db

      # PostgreSQL configuration
      # - DB_TYPE=postgresql
      # - DATABASE_URL=postgres://postgres:postgres@db:5432/openbadges
    volumes:
      - sqlite_data:/data
    depends_on:
      db:
        condition: service_healthy
    restart: "no"

volumes:
  postgres_data:
  sqlite_data:
