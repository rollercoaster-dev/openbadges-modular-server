# Environment variables for E2E Testing

# API Configuration
API_BASE_URL=http://localhost:3001 # Using port 3001 for testing to avoid conflicts
PORT=3001 # Server port for E2E tests

# Default DB_TYPE for test runs (can be overridden by specific test scripts)
# DB_TYPE=sqlite
# DB_TYPE=postgresql

# PostgreSQL Test Database (matches docker-compose.test.yml)
POSTGRES_HOST=localhost
POSTGRES_PORT=5433
POSTGRES_USER=testuser
POSTGRES_PASSWORD=testpassword
POSTGRES_DB=openbadges_test
DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}

# SQLite Test Database
SQLITE_DB_PATH=./tests/e2e/test_database.sqlite # Path relative to project root
# For SQLite, DATABASE_URL might be set to something like: sqlite:${SQLITE_DB_PATH}

# Authentication Configuration
AUTH_ENABLED=true
# Format: AUTH_API_KEY_TEST=<API_KEY>:<USER_ID>:<DESCRIPTION>
# The API key adapter will add the role as a claim, but we need to add permissions manually
# We'll use a special environment variable to add permissions to our test user
AUTH_API_KEY_TEST=verysecretkeye2e:test-user:E2E Testing Key with Admin Permissions
AUTH_API_KEY_E2E=verysecretkeye2e:e2e-user:E2E Testing Key with Admin Permissions
# Add public paths for testing
AUTH_PUBLIC_PATHS=/docs,/swagger,/health,/public,/v3/issuers/*/verify,/v3/badge-classes/*/verify,/v3/assertions/*/verify
# Disable RBAC for testing
AUTH_DISABLE_RBAC=true
